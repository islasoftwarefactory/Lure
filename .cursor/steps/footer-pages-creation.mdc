# ðŸŽ¯ **FOOTER PAGES CREATION - STANDARD LAYOUT PATTERN**
## Create Individual Pages for Footer Content Following FavoritesPage Layout

### **TASK OVERVIEW**
Create individual React components for each footer content section (Privacy Policy, Terms of Service, Shipping Policy, About Us, etc.) following the exact same layout pattern used in `FavoritesPage.tsx`.

---

## **LAYOUT PATTERN ANALYSIS**
Based on `FavoritesPage.tsx`, the standard page structure is:

```typescript
<div className="flex flex-col min-h-screen bg-[#f2f2f2]">
    <AnnouncementBar />
    <Header onCartClick={() => setIsCartOpen(true)} />
    
    <main className="flex-grow container mx-auto px-4 pt-32 sm:pt-36 pb-24 sm:pb-32 flex flex-col items-center">
        <div className="w-full max-w-6xl mx-auto space-y-8">
            {/* Page Title Container */}
            <div className="bg-white rounded-2xl shadow-lg p-5 text-center">
                <h1 className="text-3xl md:text-4xl font-extrabold font-aleo text-gray-900">
                    [PAGE_TITLE]
                </h1>
            </div>
            
            {/* Main Content Container */}
            <div className="bg-white rounded-2xl shadow-lg p-8">
                [PAGE_CONTENT]
            </div>
        </div>
    </main>
    
    <Footer />
    <SideCart />
</div>
```

---

## **PAGES TO CREATE**

### **1. Privacy Policy Page**
**File**: `app/src/components/PrivacyPolicyPage.tsx`
**Content Source**: `/docs/privacy-policy.md`
**Title**: "Privacy Policy"

### **2. Terms of Service Page**
**File**: `app/src/components/TermsOfServicePage.tsx`
**Content Source**: `/docs/terms-of-service.md`
**Title**: "Terms of Service"

### **3. Shipping Policy Page**
**File**: `app/src/components/ShippingPolicyPage.tsx`
**Content Source**: `/docs/shipping-policy.md`
**Title**: "Shipping Policy"

### **4. About Us Page**
**File**: `app/src/components/AboutUsPage.tsx`
**Content Source**: `/docs/about-us-suggestion.md`
**Title**: "About Us"

### **5. Contact Page Enhancement**
**File**: Update existing `app/src/components/ContactPage.tsx`
**Follow same layout pattern**
**Title**: "Contact Us"

---

## **COMPONENT TEMPLATE STRUCTURE**

### **Required Imports**
```typescript
'use client'

import React, { useEffect } from 'react';
import { Header } from './Header';
import { Footer } from './Footer';
import { AnnouncementBar } from './AnnouncementBar';
import { SideCart } from "./SideCart";
import { useCart } from '../context/CartContext';

// GA4 gtag declaration (follow FavoritesPage pattern)
declare global {
  function gtag(...args: any[]): void;
}
```

### **Component Structure Template**
```typescript
export function [PageName]Page() {
    const { isCartOpen, setIsCartOpen, cartItems, setCartItems } = useCart();

    // GA4 page_view event (follow FavoritesPage pattern)
    useEffect(() => {
        if (typeof gtag !== 'undefined') {
            gtag('event', 'page_view', {
                page_title: '[Page Title]',
                page_location: window.location.href,
                page_path: '/[route-name]'
            });

            console.log('GA4 page_view event fired for [page name] page:', {
                page_title: '[Page Title]',
                page_location: window.location.href,
                page_path: '/[route-name]'
            });
        }
    }, []);

    return (
        <div className="flex flex-col min-h-screen bg-[#f2f2f2]">
            <AnnouncementBar />
            <Header onCartClick={() => setIsCartOpen(true)} />

            <main className="flex-grow container mx-auto px-4 pt-32 sm:pt-36 pb-24 sm:pb-32 flex flex-col items-center">
                <div className="w-full max-w-6xl mx-auto space-y-8">
                    {/* Page Title */}
                    <div className="bg-white rounded-2xl shadow-lg p-5 text-center">
                        <h1 className="text-3xl md:text-4xl font-extrabold font-aleo text-gray-900">
                            [Page Title]
                        </h1>
                    </div>

                    {/* Main Content */}
                    <div className="bg-white rounded-2xl shadow-lg p-8">
                        [CONVERTED_MARKDOWN_CONTENT]
                    </div>
                </div>
            </main>

            <Footer />

            <SideCart
                isOpen={isCartOpen}
                onClose={() => setIsCartOpen(false)}
                items={cartItems}
                setItems={setCartItems}
            />
        </div>
    );
}
```

---

## **CONTENT CONVERSION REQUIREMENTS**

### **Markdown to JSX Conversion**
Convert markdown content from `/docs/` files to JSX:

```typescript
// FROM (Markdown)
# Main Title
## Section Title
**Bold text**
- List item 1
- List item 2

// TO (JSX)
<div className="prose prose-lg max-w-none">
    <h2 className="text-2xl font-bold mb-4">Section Title</h2>
    <p className="mb-4">
        <strong>Bold text</strong>
    </p>
    <ul className="list-disc list-inside mb-4 space-y-2">
        <li>List item 1</li>
        <li>List item 2</li>
    </ul>
</div>
```

### **Styling Requirements**
- **Use Tailwind CSS classes** for all styling
- **Typography**: Use `prose` classes or manual text classes
- **Spacing**: Consistent spacing with `mb-4`, `space-y-2`
- **Colors**: Follow existing color scheme (gray text, black headings)
- **Responsive**: Ensure mobile-friendly rendering

---

## **SPECIFIC CONTENT MAPPING**

### **Privacy Policy Content Structure**
```jsx
<div className="prose prose-lg max-w-none">
    <p className="text-sm text-gray-600 mb-6">Last Updated: June 24, 2025</p>
    
    <div className="mb-8">
        <p className="mb-4">At Lure, we value your privacy...</p>
    </div>

    <h2 className="text-2xl font-bold mb-4">1. What Information We Collect</h2>
    <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">a. Personal Information You Provide Directly:</h3>
        <ul className="list-disc list-inside mb-4 space-y-2">
            <li><strong>Contact Information:</strong> Your full name, email address...</li>
        </ul>
    </div>
    
    {/* Continue with all sections... */}
</div>
```

### **Contact Information Consistency**
Ensure all pages show consistent contact information:
```jsx
<div className="bg-gray-50 rounded-lg p-6 mt-8">
    <h3 className="text-lg font-semibold mb-3">Contact Us</h3>
    <p className="mb-2"><strong>Email:</strong> contact@lureclo.com</p>
    <p><strong>Contact Page:</strong> [Link to Contact page]</p>
</div>
```

---

## **IMPLEMENTATION REQUIREMENTS**

### **1. File Creation Order**
1. Start with **ShippingPolicyPage.tsx** (simplest content)
2. Then **PrivacyPolicyPage.tsx** (most complex)
3. Then **TermsOfServicePage.tsx** (similar to privacy)
4. Then **AboutUsPage.tsx** (placeholder content)
5. Finally update **ContactPage.tsx** to match pattern

### **2. Route Integration**
After creating components, they will need to be added to routing:
```typescript
// Future routing implementation (not in this task)
/privacy-policy -> PrivacyPolicyPage
/terms-of-service -> TermsOfServicePage  
/shipping-policy -> ShippingPolicyPage
/about-us -> AboutUsPage
/contact -> ContactPage
```

### **3. Footer Link Updates**
Update Footer.tsx links to point to these pages (separate task):
```jsx
// FROM
<a href="#" className="...">Privacy Policy</a>

// TO  
<a href="/privacy-policy" className="...">Privacy Policy</a>
```

---

## **VERIFICATION CHECKLIST**

### **Layout Verification**
- [ ] AnnouncementBar at top
- [ ] Header with cart functionality
- [ ] Main content area with proper spacing (pt-32 sm:pt-36 pb-24 sm:pb-32)
- [ ] White rounded title container with shadow
- [ ] White rounded content container with shadow
- [ ] Footer at bottom
- [ ] SideCart component included

### **Content Verification**
- [ ] Page title matches intended content
- [ ] All markdown content properly converted to JSX
- [ ] Typography and spacing consistent
- [ ] Contact information present and consistent
- [ ] No broken links or missing content

### **Technical Verification**
- [ ] GA4 page_view events firing correctly
- [ ] Cart functionality working (inherited from useCart)
- [ ] Responsive design working on mobile/tablet/desktop
- [ ] No TypeScript errors
- [ ] No console errors

### **Design Verification**
- [ ] Matches FavoritesPage visual style exactly
- [ ] White containers on light gray background
- [ ] Proper shadows and rounded corners
- [ ] Consistent font sizes and weights
- [ ] Proper spacing between elements

---

## **SUCCESS CRITERIA**
1. **Visual Consistency**: All pages look identical to FavoritesPage layout
2. **Content Accuracy**: All markdown content properly converted and displayed
3. **Functionality**: Cart, navigation, and GA4 tracking work correctly
4. **Responsive Design**: Pages work perfectly on all device sizes
5. **Code Quality**: Clean, maintainable React components following project patterns

---

## **NEXT PHASE TASKS** (Not included in this implementation)
1. Add routing for these pages
2. Update Footer.tsx links to use actual routes
3. Create navigation between related pages
4. Add breadcrumb navigation if needed

---

**ðŸš€ IMPLEMENTATION READY**: Create professional, consistent footer content pages following the exact layout pattern established in FavoritesPage.tsx, ensuring perfect visual and functional consistency across the application.
description:
globs:
alwaysApply: false
---
