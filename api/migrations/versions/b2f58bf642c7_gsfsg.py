"""gsfsg

Revision ID: b2f58bf642c7
Revises: 
Create Date: 2025-06-16 21:54:16.202717

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'b2f58bf642c7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Etapa de correção de dados: Re-associar compras com endereços inválidos.
    conn = op.get_bind()
    
    # Primeiro, verifica se existe algum endereço para usar como padrão.
    # Se não houver, a migração não pode continuar de forma segura.
    res = conn.execute(sa.text("SELECT id FROM addresses ORDER BY id LIMIT 1"))
    first_address_id = res.scalar()
    
    if first_address_id is None:
        # Se você sabe que deveria haver um endereço padrão, você pode criá-lo aqui.
        # Por segurança, vamos lançar um erro se nenhum endereço for encontrado.
        # op.execute("INSERT INTO addresses (user_id, street, ...) VALUES (...)")
        # raise Exception("Não foi possível migrar: Nenhum endereço encontrado na tabela 'addresses' para associar às compras órfãs.")
        # O ideal é não interromper a migração. Se possível, garanta que há endereços
        # ou, se for seguro, delete as compras órfãs.
        # Como deletar dados pode ser perigoso, vamos apenas pular a atualização se não houver endereços.
        pass
    else:
        # Atualiza as compras cujo shipping_address_id não corresponde a nenhum endereço existente.
        op.execute(
            sa.text(
                """
                UPDATE purchases p
                LEFT JOIN addresses a ON p.shipping_address_id = a.id
                SET p.shipping_address_id = :default_address_id
                WHERE a.id IS NULL AND p.shipping_address_id IS NOT NULL;
                """
            ).bindparams(default_address_id=first_address_id)
        )

    with op.batch_alter_table('purchases', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_purchases_shipping_address_id', 'addresses', ['shipping_address_id'], ['id'])

    with op.batch_alter_table('scrapings', schema=None) as batch_op:
        batch_op.alter_column('last_name',
               existing_type=mysql.VARCHAR(length=40),
               nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('scrapings', schema=None) as batch_op:
        batch_op.alter_column('last_name',
               existing_type=mysql.VARCHAR(length=40),
               nullable=False)

    with op.batch_alter_table('purchases', schema=None) as batch_op:
        batch_op.drop_constraint('fk_purchases_shipping_address_id', type_='foreignkey')

    # ### end Alembic commands ###
