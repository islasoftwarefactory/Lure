# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "fix/locked-page" branch
  push:
    branches: [ "fix/locked-page" ]
  pull_request:
    branches: [ "fix/locked-page" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Start container and build application
        run: |
          git fetch origin fix/locked-page
          git checkout fix/locked-page
          git pull origin fix/locked-page
          docker run --rm --name lure-app-build -w /app -v $GITHUB_WORKSPACE/app:/app node:lts bash -c "npm i && npm run build"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: app/dist/

  deploy:
    needs: build
    runs-on: self-hosted
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: app/dist

      # Deploy frontend
      - name: Copy frontend to lureclo via Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/app/dist:/dist:ro \
            -v /var/www/lureclo:/var/www/lureclo \
            alpine:latest \
            sh -c "cp -r /dist/* /var/www/lureclo/"

      # Create .env file for docker-compose
      - name: Create environment file
        run: |
          cat > .env << EOF
          FLASK_APP=app.py
          FLASK_ENV=production
          FLASK_PORT=5000
          JWT_SECRET_KEY=065997468111a63c1a6927b1875dc5334fce64729c038800baa5464a2b4e2a7b
          JWT_EXPIRATION_MINUTES=1440
          PYTHONPATH=/:/api
          DB_HOST=lure_mysql_srvr
          DB_PORT=3306
          DB_DATABASE=Lure
          DB_USERNAME=65CC63A4E10EE8F05BE4E1A8
          DB_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_HOST=lure_mysql_srvr
          MYSQL_PORT=3306
          MYSQL_ROOT_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_DATABASE=Lure
          MYSQL_USER=65CC63A4E10EE8F05BE4E1A8
          MYSQL_PASSWORD=1C969B094797CB3AF27FF949
          REDIS_HOST=lure_redis_srvr
          REDIS_PORT=6379
          REDIS_PASSWORD=redis_password
          REDIS_DB=0
          EOF

      # Clean rebuild backend without cache
      - name: Rebuild backend without cache
        run: |
          # Stop current backend container
          docker-compose stop api || true
          
          # Remove current backend container
          docker-compose rm -f api || true
          
          # Remove backend images to ensure clean build
          docker rmi lure_api_srvr || true
          docker image prune -f
          
          # Build backend without cache and pull latest base images
          docker-compose build --no-cache --pull api
          
          # Start backend with force recreate
          docker-compose up -d --force-recreate api

      # Verify backend health after deployment
      - name: Verify backend deployment
        run: |
          echo "Waiting for backend to start..."
          sleep 30
          
          # Check if backend container is running
          if docker-compose ps api | grep -q "Up"; then
            echo "✅ Backend container is running"
          else
            echo "❌ Backend container failed to start"
            docker-compose logs api
            exit 1
          fi
          
          # Check backend health endpoint
          if curl -f http://localhost:60123/health; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed"
            exit 1
          fi
