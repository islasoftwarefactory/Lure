# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "feat/ghost-checkout" branch
  push:
    branches: [ "feat/ghost-checkout" ]
  pull_request:
    branches: [ "feat/ghost-checkout" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    runs-on: self-hosted
    
    steps:
      # Clean workspace with Docker to fix permission issues
      - name: Clean workspace with Docker
        run: |
          echo "=== Cleaning workspace with Docker ==="
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            alpine:latest \
            sh -c "find /workspace -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true"
          echo "✅ Workspace cleanup completed"
      
      # Checkout repository to get updated compose.yml
      - uses: actions/checkout@v4
      
      # Frontend will be built inside container - no manual copy needed
      - name: Frontend deployment strategy
        run: |
          echo "=== Frontend Build Strategy ==="
          echo "Frontend will be built inside the app container using Dockerfile.prod"
          echo "Container builds and serves optimized production files via nginx"
          echo "✅ Frontend deployment strategy confirmed"

      # Create .env file for docker-compose (backend) - USANDO GITHUB SECRETS
      - name: Create environment file
        run: |
          cat > .env << EOF
          FLASK_APP=app.py
          FLASK_ENV=production
          FLASK_PORT=5000
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_EXPIRATION_MINUTES=1440
          PYTHONPATH=/:/api
          DB_HOST=lure_mysql_srvr
          DB_PORT=3306
          DB_DATABASE=Lure
          DB_USERNAME=65CC63A4E10EE8F05BE4E1A8
          DB_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_HOST=lure_mysql_srvr
          MYSQL_PORT=3306
          MYSQL_ROOT_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_DATABASE=Lure
          MYSQL_USER=65CC63A4E10EE8F05BE4E1A8
          MYSQL_PASSWORD=1C969B094797CB3AF27FF949
          REDIS_HOST=lure_redis_srvr
          REDIS_PORT=6379
          REDIS_PASSWORD=redis_password
          REDIS_DB=0
          STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
          EOF

      # Ensure Flask-Migrate is properly configured in container
      - name: Setup Flask-Migrate configuration
        run: |
          echo "=== Setting up Flask-Migrate configuration ==="
          
          # Create alembic.ini if it doesn't exist
          cat > api/migrations/alembic.ini << 'EOF'
          # A generic, single database configuration.

          [alembic]
          # template used to generate migration files
          # file_template = %%(rev)s_%%(slug)s

          # set to 'true' to run the environment during
          # the 'revision' command, regardless of autogenerate
          # revision_environment = false

          # Logging configuration
          [loggers]
          keys = root,sqlalchemy,alembic,flask_migrate

          [handlers]
          keys = console

          [formatters]
          keys = generic

          [logger_root]
          level = WARN
          handlers = console
          qualname =

          [logger_sqlalchemy]
          level = WARN
          handlers =
          qualname = sqlalchemy.engine

          [logger_alembic]
          level = INFO
          handlers =
          qualname = alembic

          [logger_flask_migrate]
          level = INFO
          handlers =
          qualname = flask_migrate

          [handler_console]
          class = StreamHandler
          args = (sys.stderr,)
          level = NOTSET
          formatter = generic

          [formatter_generic]
          format = %(levelname)-5.5s [%(name)s] %(message)s
          datefmt = %H:%M:%S
          EOF
          
          echo "✅ Flask-Migrate configuration created"

      # Create .env file for frontend
      - name: Create frontend environment file
        run: |
          cat > app/.env << EOF
          # Frontend Environment Variables
          VITE_API_BASE_URL=https://locked.lureclo.com
          VITE_API_URL=https://locked.lureclo.com
          VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
          EOF

      # Restart simples - MANTÉM VOLUMES E DADOS
      - name: Simple restart without data loss
        run: |
          echo "=== Restart simples mantendo dados ==="
          
          # Verificar se .env existe
          if [ -f ".env" ]; then
            echo "✅ .env file found"
          else
            echo "❌ .env file not found"
            exit 1
          fi
          
          # Para os serviços mas MANTÉM volumes
          echo "Parando serviços..."
          docker-compose down
          
          # Inicia os serviços novamente, forçando rebuild das imagens
          echo "Iniciando serviços com rebuild..."
          docker-compose up -d --build
          
          echo "✅ Restart -  concluído - dados preservados e imagens reconstruídas"

      # Initialize Flask-Migrate and run migrations
      - name: Initialize and run Flask database migrations
        run: |
          echo "=== Initializing Flask-Migrate and Running Migrations ==="
          
          # Wait for database to be ready
          echo "Waiting for database to be ready..."
          sleep 30
          
          # Check if migrations directory exists and initialize if needed
          echo "Checking migrations setup..."
          docker-compose exec -T api bash -c "
            cd /api
            if [ ! -d 'migrations' ]; then
              echo 'Initializing Flask-Migrate...'
              flask db init
            else
              echo 'Migrations directory exists'
            fi
          "
          
          # Handle existing database and apply GhostCheckout changes safely
          echo "Applying GhostCheckout database changes safely..."
          docker-compose exec -T api bash -c "
            cd /api
            echo 'Checking current database state...'
            flask db current || echo 'No current revision'
            
            echo 'Applying GhostCheckout changes manually...'
            # Create auth_providers table if it doesn't exist
            mysql -h lure_mysql_srvr -u 65CC63A4E10EE8F05BE4E1A8 -p1C969B094797CB3AF27FF949 Lure -e \"
              CREATE TABLE IF NOT EXISTS auth_providers (
                id INT AUTO_INCREMENT PRIMARY KEY,
                name VARCHAR(50) UNIQUE NOT NULL,
                description VARCHAR(255),
                created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
              );
              
              INSERT IGNORE INTO auth_providers (name, description) VALUES 
                ('Google', 'Google OAuth authentication'),
                ('Ghost', 'Guest user without authentication');
              
              -- Add auth_provider_id column if it doesn't exist
              SET @col_exists = (SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS 
                WHERE TABLE_SCHEMA = 'Lure' AND TABLE_NAME = 'users' AND COLUMN_NAME = 'auth_provider_id');
              
              SET @sql = IF(@col_exists = 0, 
                'ALTER TABLE users ADD COLUMN auth_provider_id INT', 
                'SELECT \\\"Column auth_provider_id already exists\\\" as message');
              PREPARE stmt FROM @sql;
              EXECUTE stmt;
              DEALLOCATE PREPARE stmt;
              
              -- Update existing users to use Google provider
              UPDATE users SET auth_provider_id = (SELECT id FROM auth_providers WHERE name = 'Google') 
              WHERE auth_provider_id IS NULL;
              
              -- Make provider_id nullable if it isn't already
              ALTER TABLE users MODIFY COLUMN provider_id VARCHAR(255) NULL;
              
              -- Remove email unique constraint if it exists
              SET @constraint_exists = (SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
                WHERE TABLE_SCHEMA = 'Lure' AND TABLE_NAME = 'users' AND CONSTRAINT_NAME = 'email');
              
              SET @sql = IF(@constraint_exists > 0, 
                'ALTER TABLE users DROP INDEX email', 
                'SELECT \\\"Email constraint does not exist\\\" as message');
              PREPARE stmt FROM @sql;
              EXECUTE stmt;
              DEALLOCATE PREPARE stmt;
            \"
            
            echo 'Stamping database to mark as up-to-date...'
            flask db stamp head || echo 'Could not stamp - continuing anyway'
            
            echo 'GhostCheckout database changes applied successfully!'
          "
          
          # Check migration status
          if [ $? -eq 0 ]; then
            echo "✅ Database migrations completed successfully"
          else
            echo "❌ Database migrations failed"
            echo "=== API Container Logs ==="
            docker-compose logs api
            exit 1
          fi

      # Verify backend health after deployment
      - name: Verify backend deployment
        run: |     
          echo "Waiting for services to start..."
          sleep 60
          
          # Check if all containers are running
          echo "=== Container Status ==="
          docker-compose ps
          
          # Check if backend container is running
          if docker-compose ps api | grep -q "Up"; then
            echo "✅ Backend container is running"
          else
            echo "❌ Backend container failed to start"
            docker-compose logs api
            exit 1
          fi
          
          # Check if MySQL container is running
          if docker-compose ps mysql | grep -q "Up"; then
            echo "✅ MySQL container is running"
          else
            echo "❌ MySQL container failed to start"
            docker-compose logs mysql
            exit 1
          fi
          
          # Check if Redis container is running  
          if docker-compose ps redis | grep -q "Up"; then
            echo "✅ Redis container is running"
          else
            echo "❌ Redis container failed to start"
            docker-compose logs redis
            exit 1
          fi
          
          # Check if Proxy container is running
          if docker-compose ps proxy | grep -q "Up"; then
            echo "✅ Proxy container is running"
          else
            echo "❌ Proxy container failed to start"
            echo "=== PROXY LOGS ==="
            docker-compose logs proxy
            echo "=== ALL CONTAINER STATUS ==="
            docker-compose ps
            exit 1
          fi
          
          # Check backend health endpoint via proxy (main test!)
          echo "=== Testing Health via Proxy ==="
          if curl -f http://localhost/health; then
            echo "✅ Proxy health check passed - API working!"
          else
            echo "❌ Proxy health check failed - checking logs..."
            docker-compose logs proxy
            exit 1
          fi
          
          # Test frontend serving via proxy
          echo "=== Testing Frontend via Proxy ==="
          if curl -f -s http://localhost/ | grep -q "<title>"; then
            echo "✅ Frontend serving correctly via proxy!"
          else
            echo "❌ Frontend not serving correctly - checking logs..."
            echo "=== APP CONTAINER LOGS ==="
            docker-compose logs app
            echo "=== PROXY LOGS ==="
            docker-compose logs proxy
            exit 1
          fi
          
          echo "🎉 All services verified - Site should be fully functional!"
