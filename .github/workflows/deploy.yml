# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "fix/proxy-nginx2.0" branch
  push:
    branches: [ "fix/proxy-nginx2.0" ]
  pull_request:
    branches: [ "fix/proxy-nginx2.0" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-outs your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Start container and build application
        run: |
          git fetch origin fix/proxy-nginx2.0
          git checkout fix/proxy-nginx2.0
          git pull origin fix/proxy-nginx2.0
          docker run --rm --name lure-app-build -w /app -v $GITHUB_WORKSPACE/app:/app node:lts bash -c "npm i && npm run build"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: app/dist/

  deploy:
    needs: build
    runs-on: self-hosted
    
    steps:
      # Clean workspace with Docker to fix permission issues
      - name: Clean workspace with Docker
        run: |
          echo "=== Cleaning workspace with Docker ==="
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            alpine:latest \
            sh -c "find /workspace -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true"
          echo "✅ Workspace cleanup completed"
      
      # Checkout repository to get updated compose.yml
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: app/dist

      # Deploy frontend
      - name: Copy frontend to lureclo via Docker
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/app/dist:/dist:ro \
            -v /var/www/lureclo:/var/www/lureclo \
            alpine:latest \
            sh -c "cp -r /dist/* /var/www/lureclo/"

      # Create .env file for docker-compose
      - name: Create environment file
        run: |
          cat > .env << EOF
          FLASK_APP=app.py
          FLASK_ENV=production
          FLASK_PORT=5000
          JWT_SECRET_KEY=065997468111a63c1a6927b1875dc5334fce64729c038800baa5464a2b4e2a7b
          JWT_EXPIRATION_MINUTES=1440
          PYTHONPATH=/:/api
          DB_HOST=lure_mysql_srvr
          DB_PORT=3306
          DB_DATABASE=Lure
          DB_USERNAME=65CC63A4E10EE8F05BE4E1A8
          DB_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_HOST=lure_mysql_srvr
          MYSQL_PORT=3306
          MYSQL_ROOT_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_DATABASE=Lure
          MYSQL_USER=65CC63A4E10EE8F05BE4E1A8
          MYSQL_PASSWORD=1C969B094797CB3AF27FF949
          REDIS_HOST=lure_redis_srvr
          REDIS_PORT=6379
          REDIS_PASSWORD=redis_password
          REDIS_DB=0
          EOF

      # Targeted cleanup only for Lure containers
      - name: Cleanup Lure containers only
        run: |
          echo "=== Starting targeted Lure cleanup ==="
          
          # Stop compose services gracefully
          docker-compose down --remove-orphans || true
          
          # Remove specific Lure containers by name
          docker rm -f lure_api_srvr 2>/dev/null || true
          docker rm -f lure_mysql_srvr 2>/dev/null || true
          docker rm -f lure_redis_srvr 2>/dev/null || true
          docker rm -f app-srvr 2>/dev/null || true
          docker rm -f lure_proxy_srvr 2>/dev/null || true
          
          # Remove specific Lure images by name/tag
          docker rmi lure_api_srvr 2>/dev/null || true
          docker rmi lure_app-srvr 2>/dev/null || true
          docker rmi $(docker images | grep "lure" | awk '{print $3}') 2>/dev/null || true
          
          # Remove only Lure-related volumes
          docker volume rm lure_mysql-data 2>/dev/null || true
          docker volume rm lure_redis-data 2>/dev/null || true
          
          # Remove only dangling images (safe cleanup)
          docker image prune -f
          
          echo "✅ Targeted Lure cleanup completed"

      # Clean rebuild backend without cache
      - name: Rebuild backend without cache
        run: |
          echo "=== Building backend with clean slate ==="
          
          # Verify .env exists
          if [ -f ".env" ]; then
            echo "✅ .env file found"
          else
            echo "❌ .env file not found"
            exit 1
          fi
          
          # Build all services without cache and pull latest base images
          docker-compose build --no-cache --pull
          
          # Start all services with force recreate
          docker-compose up -d --force-recreate
          
          echo "✅ Backend rebuild completed"

      # Verify backend health after deployment
      - name: Verify backend deployment
        run: |
          echo "Waiting for services to start..."
          sleep 45
          
          # Check if all containers are running
          echo "=== Container Status ==="
          docker-compose ps
          
          # Check if backend container is running
          if docker-compose ps api | grep -q "Up"; then
            echo "✅ Backend container is running"
          else
            echo "❌ Backend container failed to start"
            docker-compose logs api
            exit 1
          fi
          
          # Check if MySQL container is running
          if docker-compose ps mysql | grep -q "Up"; then
            echo "✅ MySQL container is running"
          else
            echo "❌ MySQL container failed to start"
            docker-compose logs mysql
            exit 1
          fi
          
          # Check if Redis container is running  
          if docker-compose ps redis | grep -q "Up"; then
            echo "✅ Redis container is running"
          else
            echo "❌ Redis container failed to start"
            docker-compose logs redis
            exit 1
          fi
          
          # Check if Proxy container is running
          if docker-compose ps proxy | grep -q "Up"; then
            echo "✅ Proxy container is running"
          else
            echo "❌ Proxy container failed to start"
            echo "=== PROXY LOGS ==="
            docker-compose logs proxy
            echo "=== ALL CONTAINER STATUS ==="
            docker-compose ps
            exit 1
          fi
          
          # Check backend health endpoint via proxy (main test!)
          echo "=== Testing Health via Proxy ==="
          if curl -f http://localhost/health; then
            echo "✅ Proxy health check passed - Cloudflare should work!"
          else
            echo "❌ Proxy health check failed - checking logs..."
            docker-compose logs proxy
            exit 1
          fi
