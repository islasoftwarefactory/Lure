name: Deploy Lure Application to Server

on:
  # Dispara o workflow em push para a branch 'refact/nginx'.
  # IMPORTANTE: Altere 'refact/nginx' para a sua branch principal de deploy (ex: 'main' ou 'pipeline') quando estiver pronto.
  push:
    branches: [ "refact/nginx" ]

  # Permite que você rode este workflow manualmente pela aba Actions
  workflow_dispatch:

jobs:
  deploy:
    name: Build and Deploy Application
    runs-on: self-hosted # Este job roda diretamente no seu servidor

    steps:
      # PASSO NOVO: Limpar o diretório de trabalho com permissões de administrador.
      # Isso remove quaisquer arquivos deixados por execuções anteriores que possam ter permissões incorretas.
      - name: Force Clean Workspace
        run: sudo rm -rf ./*

      # Passo 1: Baixar o código mais recente do repositório
      - name: Check out repository
        uses: actions/checkout@v4

      # Passo 2: Criar o arquivo .env no servidor usando os valores fornecidos.
      # O comando 'cat << EOF > .env' é uma forma eficiente de criar um arquivo com múltiplas linhas.
      - name: Create .env file
        run: |
          cat << EOF > .env
          FLASK_APP=app.py
          FLASK_ENV=production
          FLASK_PORT=5000
          JWT_SECRET_KEY=065997468111a63c1a6927b1875dc5334fce64729c038800baa5464a2b4e2a7b
          JWT_EXPIRATION_MINUTES=1440
          PYTHONPATH=/:/api
          DB_HOST=lure_mysql_srvr
          DB_PORT=3306
          DB_DATABASE=Lure
          DB_USERNAME=65CC63A4E10EE8F05BE4E1A8
          DB_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_HOST=lure_mysql_srvr
          MYSQL_PORT=3306
          MYSQL_ROOT_PASSWORD=1C969B094797CB3AF27FF949
          MYSQL_DATABASE=Lure
          MYSQL_USER=65CC63A4E10EE8F05BE4E1A8
          MYSQL_PASSWORD=1C969B094797CB3AF27FF949
          REDIS_HOST=lure_redis_srvr
          REDIS_PORT=6379
          REDIS_PASSWORD=redis_password
          REDIS_DB=0
          EOF

      # NOVO PASSO DE DIAGNÓSTICO:
      # Este comando vai mostrar o que o docker-compose está lendo.
      - name: Validate and Display Docker-Compose Configuration
        run: docker-compose config

      # Passo 3: Parar, reconstruir e iniciar a aplicação.
      # Agora o docker-compose encontrará o .env e funcionará corretamente.
      - name: Rebuild and Deploy Docker Stack
        run: |
          docker-compose build --no-cache proxy
          docker-compose down || true
          docker-compose up -d

      # Passo 4: (Opcional) Limpar imagens Docker antigas.
      - name: Clean up old Docker images
        run: docker image prune -f

      # Ação Final Corrigida:
      - name: Stop, Rebuild, and Deploy Docker Stack
        run: |
          # Passo 1: Forçar a parada e remoção do container antigo para liberar a porta 80.
          # O '|| true' previne erros se o container não existir.
          docker stop lure_proxy_srvr || true
          docker rm lure_proxy_srvr || true

          # Passo 2: Construir a imagem do proxy sem cache para garantir a nova config.
          docker-compose build --no-cache proxy

          # Passo 3: Parar o resto da stack (se houver algo).
          docker-compose down || true
          
          # Passo 4: Subir a aplicação inteira.
          docker-compose up -d

      - name: Clean up old Docker images
        run: docker image prune -f
